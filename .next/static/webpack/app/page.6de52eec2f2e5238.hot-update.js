"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/providers/FirestoreSyncProvider.tsx":
/*!************************************************************!*\
  !*** ./src/components/providers/FirestoreSyncProvider.tsx ***!
  \************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirestoreContext: function() { return /* binding */ FirestoreContext; },\n/* harmony export */   FirestoreSyncProvider: function() { return /* binding */ FirestoreSyncProvider; },\n/* harmony export */   useFirestore: function() { return /* binding */ useFirestore; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var firebase_firestore__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! firebase/firestore */ \"(app-pages-browser)/./node_modules/firebase/firestore/dist/esm/index.esm.js\");\n/* harmony import */ var _lib_firebase__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/firebase */ \"(app-pages-browser)/./src/lib/firebase.ts\");\n/* __next_internal_client_entry_do_not_use__ FirestoreSyncProvider,useFirestore,FirestoreContext auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\n// Create context\nconst FirestoreContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\n// Provider component\nfunction FirestoreSyncProvider(param) {\n    let { children } = param;\n    _s();\n    const [competitors, setCompetitors] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [hourlyEntries, setHourlyEntries] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [bigCatches, setBigCatches] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [judges, setJudges] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [competitionSettings, setCompetitionSettings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [publicAppearanceSettings, setPublicAppearanceSettings] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const unsubscribers = [];\n        let mounted = true;\n        try {\n            // Subscribe to competitors\n            const competitorsQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"competitors\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"boxNumber\", \"asc\"));\n            const unsubCompetitors = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)(competitorsQuery, (snapshot)=>{\n                if (!mounted) return;\n                const data = snapshot.docs.map((doc)=>({\n                        id: doc.id,\n                        ...doc.data()\n                    }));\n                setCompetitors(data);\n            }, (error)=>{\n                console.error(\"Error fetching competitors:\", error);\n                if (mounted) {\n                    setError(error.message);\n                    setCompetitors([]);\n                }\n            });\n            unsubscribers.push(unsubCompetitors);\n            // Subscribe to hourly entries\n            const hourlyQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"hourly_entries\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"hour\", \"asc\"));\n            const unsubHourly = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)(hourlyQuery, (snapshot)=>{\n                if (!mounted) return;\n                const data = snapshot.docs.map((doc)=>({\n                        id: doc.id,\n                        ...doc.data()\n                    }));\n                setHourlyEntries(data);\n            }, (error)=>{\n                console.error(\"Error fetching hourly entries:\", error);\n                if (mounted) {\n                    setError(error.message);\n                    setHourlyEntries([]);\n                }\n            });\n            unsubscribers.push(unsubHourly);\n            // Subscribe to big catches\n            const bigCatchesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"big_catches\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"grossePrise\", \"desc\"));\n            const unsubBigCatches = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)(bigCatchesQuery, (snapshot)=>{\n                if (!mounted) return;\n                const data = snapshot.docs.map((doc)=>({\n                        id: doc.id,\n                        ...doc.data()\n                    }));\n                setBigCatches(data);\n            }, (error)=>{\n                console.error(\"Error fetching big catches:\", error);\n                if (mounted) {\n                    setError(error.message);\n                    setBigCatches([]);\n                }\n            });\n            unsubscribers.push(unsubBigCatches);\n            // Subscribe to judges\n            const judgesQuery = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"judges\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.orderBy)(\"name\", \"asc\"));\n            const unsubJudges = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)(judgesQuery, (snapshot)=>{\n                if (!mounted) return;\n                const data = snapshot.docs.map((doc)=>({\n                        uid: doc.id,\n                        ...doc.data()\n                    }));\n                setJudges(data);\n            }, (error)=>{\n                console.error(\"Error fetching judges:\", error);\n                if (mounted) {\n                    setError(error.message);\n                    setJudges([]);\n                }\n            });\n            unsubscribers.push(unsubJudges);\n            // Subscribe to competition settings\n            const unsubSettings = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"competitionSettings\", \"main\"), (snapshot)=>{\n                if (!mounted) return;\n                if (snapshot.exists()) {\n                    setCompetitionSettings({\n                        id: snapshot.id,\n                        ...snapshot.data()\n                    });\n                } else {\n                    setCompetitionSettings(null);\n                }\n            }, (error)=>{\n                console.error(\"Error fetching competition settings:\", error);\n                if (mounted) {\n                    setError(error.message);\n                    setCompetitionSettings(null);\n                }\n            });\n            unsubscribers.push(unsubSettings);\n            // Subscribe to public appearance settings\n            const unsubAppearance = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.onSnapshot)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"publicAppearanceSettings\", \"main\"), (snapshot)=>{\n                if (!mounted) return;\n                if (snapshot.exists()) {\n                    setPublicAppearanceSettings({\n                        id: snapshot.id,\n                        ...snapshot.data()\n                    });\n                } else {\n                    setPublicAppearanceSettings(null);\n                }\n            }, (error)=>{\n                console.error(\"Error fetching public appearance settings:\", error);\n                if (mounted) {\n                    setError(error.message);\n                    setPublicAppearanceSettings(null);\n                }\n            });\n            unsubscribers.push(unsubAppearance);\n            if (mounted) {\n                setLoading(false);\n            }\n        } catch (err) {\n            console.error(\"Error setting up Firestore subscriptions:\", err);\n            if (mounted) {\n                setError(err instanceof Error ? err.message : \"Unknown error\");\n                setLoading(false);\n            }\n        }\n        // Cleanup\n        return ()=>{\n            mounted = false;\n            unsubscribers.forEach((unsub)=>unsub());\n        };\n    }, []);\n    // Save functions\n    const saveCompetitor = async (data)=>{\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"competitors\", data.id);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.setDoc)(docRef, {\n                ...data,\n                updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n            }, {\n                merge: true\n            });\n        } catch (err) {\n            console.error(\"Error saving competitor:\", err);\n            throw err;\n        }\n    };\n    const deleteCompetitor = async (id)=>{\n        try {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.deleteDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"competitors\", id));\n        } catch (err) {\n            console.error(\"Error deleting competitor:\", err);\n            throw err;\n        }\n    };\n    const saveHourlyEntry = async (data)=>{\n        try {\n            console.log(\"Saving hourly entry to Firebase:\", data);\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"hourly_entries\", data.id);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.setDoc)(docRef, {\n                ...data,\n                createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now(),\n                updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n            }, {\n                merge: true\n            });\n            console.log(\"Hourly entry saved successfully to Firebase\");\n            // Auto-calculate competitor totals after saving hourly entry\n            await recalculateCompetitorTotals(data.competitorId);\n        } catch (err) {\n            console.error(\"Error saving hourly entry:\", err);\n            throw err;\n        }\n    };\n    const saveBigCatch = async (data)=>{\n        try {\n            console.log(\"Saving big catch to Firebase:\", data);\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"big_catches\", data.id);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.setDoc)(docRef, {\n                ...data,\n                createdAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now(),\n                updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n            }, {\n                merge: true\n            });\n            console.log(\"Big catch saved successfully to Firebase\");\n            // Auto-calculate competitor totals after saving big catch\n            await recalculateCompetitorTotals(data.competitorId);\n        } catch (err) {\n            console.error(\"Error saving big catch:\", err);\n            throw err;\n        }\n    };\n    const saveJudge = async (data)=>{\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"judges\", data.uid);\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.setDoc)(docRef, {\n                ...data,\n                updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n            }, {\n                merge: true\n            });\n        } catch (err) {\n            console.error(\"Error saving judge:\", err);\n            throw err;\n        }\n    };\n    const deleteJudge = async (uid)=>{\n        try {\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.deleteDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"judges\", uid));\n        } catch (err) {\n            console.error(\"Error deleting judge:\", err);\n            throw err;\n        }\n    };\n    const saveCompetitionSettings = async (data)=>{\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"competitionSettings\", \"main\");\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.setDoc)(docRef, {\n                ...data,\n                updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n            }, {\n                merge: true\n            });\n        } catch (err) {\n            console.error(\"Error saving competition settings:\", err);\n            throw err;\n        }\n    };\n    const savePublicAppearanceSettings = async (data)=>{\n        try {\n            const docRef = (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"publicAppearanceSettings\", \"main\");\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.setDoc)(docRef, {\n                ...data,\n                updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n            }, {\n                merge: true\n            });\n        } catch (err) {\n            console.error(\"Error saving public appearance settings:\", err);\n            throw err;\n        }\n    };\n    // Auto-calculation function\n    const recalculateCompetitorTotals = async (competitorId)=>{\n        try {\n            // Get competitor info first\n            const competitorDoc = competitors.find((c)=>c.id === competitorId);\n            if (!competitorDoc) return;\n            const sector = competitorDoc.sector;\n            // Get all hourly entries for this competitor\n            const hourlyEntriesSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"hourly_entries\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"competitorId\", \"==\", competitorId)));\n            // Calculate totals\n            let nbPrisesGlobal = 0;\n            let poidsTotalGlobal = 0;\n            hourlyEntriesSnapshot.docs.forEach((doc)=>{\n                const entry = doc.data();\n                if ([\n                    \"locked_judge\",\n                    \"locked_admin\",\n                    \"offline_judge\",\n                    \"offline_admin\"\n                ].includes(entry.status)) {\n                    nbPrisesGlobal += entry.fishCount || 0;\n                    poidsTotalGlobal += entry.totalWeight || 0;\n                }\n            });\n            // Get grosse prise\n            const bigCatchSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"big_catches\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"competitorId\", \"==\", competitorId)));\n            let grossePrise = 0;\n            if (!bigCatchSnapshot.empty) {\n                const bigCatchData = bigCatchSnapshot.docs[0].data();\n                if ([\n                    \"locked_judge\",\n                    \"locked_admin\",\n                    \"offline_judge\",\n                    \"offline_admin\"\n                ].includes(bigCatchData.status)) {\n                    grossePrise = bigCatchData.grossePrise || 0;\n                }\n            }\n            // Calculate points\n            const points = nbPrisesGlobal * 50 + poidsTotalGlobal;\n            // Calculate coefficientSecteur\n            // First, get all competitors in the same sector to calculate sector total\n            const sectorCompetitorsSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"competitors\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"sector\", \"==\", sector)));\n            let sectorTotalNbPrises = 0;\n            // Calculate sector total from all competitors in this sector\n            for (const sectorCompDoc of sectorCompetitorsSnapshot.docs){\n                const sectorCompId = sectorCompDoc.id;\n                // Get hourly entries for this sector competitor\n                const sectorHourlySnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"hourly_entries\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"competitorId\", \"==\", sectorCompId)));\n                let compNbPrises = 0;\n                sectorHourlySnapshot.docs.forEach((doc)=>{\n                    const entry = doc.data();\n                    if ([\n                        \"locked_judge\",\n                        \"locked_admin\",\n                        \"offline_judge\",\n                        \"offline_admin\"\n                    ].includes(entry.status)) {\n                        compNbPrises += entry.fishCount || 0;\n                    }\n                });\n                sectorTotalNbPrises += compNbPrises;\n            }\n            // Calculate coefficient: (Points × Nb Prises global) / Total Nb Prises global Secteur\n            let coefficientSecteur = 0;\n            if (sectorTotalNbPrises > 0) {\n                coefficientSecteur = points * nbPrisesGlobal / sectorTotalNbPrises;\n            }\n            // Update competitor document with coefficient\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"competitors\", competitorId), {\n                nbPrisesGlobal,\n                poidsTotalGlobal,\n                grossePrise,\n                points,\n                coefficientSecteur,\n                updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n            });\n            // Also recalculate coefficients for all other competitors in the same sector\n            // since the sector total has changed\n            setTimeout(async ()=>{\n                try {\n                    for (const sectorCompDoc of sectorCompetitorsSnapshot.docs){\n                        const otherCompId = sectorCompDoc.id;\n                        if (otherCompId !== competitorId) {\n                            await recalculateCompetitorCoefficient(otherCompId, sector, sectorTotalNbPrises);\n                        }\n                    }\n                } catch (error) {\n                    console.error(\"Error recalculating sector coefficients:\", error);\n                }\n            }, 1000);\n        } catch (error) {\n            console.error(\"Error auto-calculating competitor totals:\", error);\n        }\n    };\n    // Helper function to recalculate coefficient for a specific competitor\n    const recalculateCompetitorCoefficient = async (competitorId, sector, sectorTotalNbPrises)=>{\n        try {\n            // Get competitor's current data\n            const competitorSnapshot = await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.getDocs)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.query)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.collection)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"competitors\"), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.where)(\"__name__\", \"==\", competitorId), (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.limit)(1)));\n            if (competitorSnapshot.empty) return;\n            const competitorData = competitorSnapshot.docs[0].data();\n            const points = competitorData.points || 0;\n            const nbPrisesGlobal = competitorData.nbPrisesGlobal || 0;\n            // Calculate new coefficient\n            let coefficientSecteur = 0;\n            if (sectorTotalNbPrises > 0) {\n                coefficientSecteur = points * nbPrisesGlobal / sectorTotalNbPrises;\n            }\n            // Update only the coefficient\n            await (0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.updateDoc)((0,firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.doc)(_lib_firebase__WEBPACK_IMPORTED_MODULE_3__.db, \"competitors\", competitorId), {\n                coefficientSecteur,\n                updatedAt: firebase_firestore__WEBPACK_IMPORTED_MODULE_2__.Timestamp.now()\n            });\n        } catch (error) {\n            console.error(\"Error updating coefficient for \".concat(competitorId, \":\"), error);\n        }\n    };\n    const value = {\n        competitors,\n        hourlyEntries,\n        bigCatches,\n        judges,\n        competitionSettings,\n        publicAppearanceSettings,\n        saveCompetitor,\n        deleteCompetitor,\n        saveHourlyEntry,\n        saveBigCatch,\n        saveJudge,\n        deleteJudge,\n        saveCompetitionSettings,\n        savePublicAppearanceSettings,\n        loading,\n        error\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(FirestoreContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/home/project/src/components/providers/FirestoreSyncProvider.tsx\",\n        lineNumber: 602,\n        columnNumber: 5\n    }, this);\n}\n_s(FirestoreSyncProvider, \"TNwIguAWOC/AJrPoCbJXJW9iBGc=\");\n_c = FirestoreSyncProvider;\n// Custom hook - CRITICAL: This export is required!\nfunction useFirestore() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(FirestoreContext);\n    if (context === undefined) {\n        throw new Error(\"useFirestore must be used within a FirestoreSyncProvider\");\n    }\n    return context;\n}\n_s1(useFirestore, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n// Export the context for advanced usage\n\nvar _c;\n$RefreshReg$(_c, \"FirestoreSyncProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/providers/FirestoreSyncProvider.tsx\n"));

/***/ })

});